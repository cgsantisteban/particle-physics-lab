"use strict";lab.service("errorListService",function($http,$q){var errorList,errors=$http.get("dataJSON/errorList.json");return{promise:$q.all([errors]).then(function(data){errorList=data[0].data}),getErrorList:function(){return errorList}}}),lab.service("ExperimentListService",function($http){return{getExperimentList:function(){return $http.get("/db/experiments")},saveExperiment:function(experiment){return $http({url:"/db/experiments",method:"POST",params:{experiment:experiment}})},delExperiment:function(id){return $http.delete("/db/"+id)}}}),lab.service("geantCommandsService",function($http,$q){var commandList=[],gamosList=[],visList=[],controlCommands=$http.get("dataJSON/geant4Commands/ControlCommands.json"),analysisCommands=$http.get("dataJSON/geant4Commands/AnalysisCommands.json"),unitCommands=$http.get("dataJSON/geant4Commands/UnitCommands.json"),processCommands=$http.get("dataJSON/geant4Commands/ProcessCommands.json"),particleCommands=$http.get("dataJSON/geant4Commands/ParticleCommands.json"),geometryCommands=$http.get("dataJSON/geant4Commands/GeometryCommands.json"),trackingCommands=$http.get("dataJSON/geant4Commands/TrackingCommands.json"),eventCommands=$http.get("dataJSON/geant4Commands/EventCommands.json"),cutsCommands=$http.get("dataJSON/geant4Commands/CutsCommands.json"),runCommands=$http.get("dataJSON/geant4Commands/RunCommands.json"),randomCommands=$http.get("dataJSON/geant4Commands/RandomCommands.json"),materialCommands=$http.get("dataJSON/geant4Commands/MaterialCommands.json"),hitsCommands=$http.get("dataJSON/geant4Commands/HitsCommands.json"),gamosCommands=$http.get("dataJSON/geant4Commands/GAMOS/GAMOSCommands.json"),gamosAnalysis=$http.get("dataJSON/geant4Commands/GAMOS/analysis.json"),gamosBase=$http.get("dataJSON/geant4Commands/GAMOS/base.json"),gamosClassifier=$http.get("dataJSON/geant4Commands/GAMOS/classifier.json"),gamosField=$http.get("dataJSON/geant4Commands/GAMOS/field.json"),gamosGeometry=$http.get("dataJSON/geant4Commands/GAMOS/geometry.json"),gamosGmPhysics=$http.get("dataJSON/geant4Commands/GAMOS/GmPhysics.json"),gamosGenerator=$http.get("dataJSON/geant4Commands/GAMOS/generator.json"),gamosLog=$http.get("dataJSON/geant4Commands/GAMOS/log.json"),gamosPhysics=$http.get("dataJSON/geant4Commands/GAMOS/physics.json"),gamosRandom=$http.get("dataJSON/geant4Commands/GAMOS/random.json"),gamosSD=$http.get("dataJSON/geant4Commands/GAMOS/SD.json"),gamosScoring=$http.get("dataJSON/geant4Commands/GAMOS/scoring.json"),gamosUserAction=$http.get("dataJSON/geant4Commands/GAMOS/userAction.json"),visCommands=$http.get("dataJSON/geant4Commands/Vis/VisCommands.json"),asciitreeCommands=$http.get("dataJSON/geant4Commands/Vis/ASCIITreeCommands.json"),filteringCommands=$http.get("dataJSON/geant4Commands/Vis/FilteringCommands.json"),geometryCommands=$http.get("dataJSON/geant4Commands/Vis/GeometryCommands.json"),gMocrenCommands=$http.get("dataJSON/geant4Commands/Vis/gMocrenCommands.json"),heprepCommands=$http.get("dataJSON/geant4Commands/Vis/HepRepCommands.json"),modelingCommands=$http.get("dataJSON/geant4Commands/Vis/ModelingCommands.json"),oglCommands=$http.get("dataJSON/geant4Commands/Vis/OGLCommands.json"),raytracerCommands=$http.get("dataJSON/geant4Commands/Vis/RayTracerCommands.json"),sceneCommands=$http.get("dataJSON/geant4Commands/Vis/SceneCommands.json"),scenehandlerCommands=$http.get("dataJSON/geant4Commands/Vis/SceneHandlerCommands.json"),setCommands=$http.get("dataJSON/geant4Commands/Vis/SetCommands.json"),touchableCommands=$http.get("dataJSON/geant4Commands/Vis/TouchableCommands.json"),viewerCommands=$http.get("dataJSON/geant4Commands/Vis/ViewerCommands.json");return{promise:$q.all([controlCommands,analysisCommands,unitCommands,processCommands,gamosCommands,gamosAnalysis,gamosBase,gamosClassifier,gamosField,gamosGeometry,gamosGmPhysics,gamosGenerator,gamosLog,gamosPhysics,gamosRandom,gamosSD,gamosScoring,gamosUserAction,particleCommands,geometryCommands,trackingCommands,eventCommands,cutsCommands,runCommands,randomCommands,visCommands,asciitreeCommands,filteringCommands,geometryCommands,gMocrenCommands,heprepCommands,modelingCommands,oglCommands,raytracerCommands,sceneCommands,scenehandlerCommands,setCommands,touchableCommands,viewerCommands,materialCommands,hitsCommands]).then(function(data){gamosList=data[4].data,gamosList.children=gamosList.children.concat(data[5].data,data[6].data,data[7].data,data[8].data,data[9].data,data[10].data,data[11].data,data[12].data,data[13].data,data[14].data,data[15].data,data[16].data,data[17].data),visList=data[25].data,visList.children=visList.children.concat(data[26].data,data[27].data,data[28].data,data[29].data,data[30].data,data[31].data,data[32].data,data[33].data,data[34].data,data[35].data,data[36].data,data[37].data,data[38].data),commandList=commandList.concat(data[0].data,data[1].data,data[2].data,data[3].data,gamosList,data[18].data,data[19].data,data[20].data,data[21].data,data[22].data,data[23].data,data[24].data,visList,data[39].data,data[40].data)}),getCommandList:function(){return commandList}}}),lab.service("genericService",function($http,$q){var initPhysicsList={},initHelp=[],eventGeneratorList=[],fitConfig={},physicsList=$http.get("dataJSON/physicsList.json"),eventGenerator=$http.get("dataJSON/sources/eventGenerator.json"),helpDescription=$http.get("dataJSON/help/help.json"),fit=$http.get("dataJSON/fitConfig.json");return{promise:$q.all([physicsList,eventGenerator,helpDescription,fit]).then(function(data){initPhysicsList.physicsList=data[0].data,eventGeneratorList=data[1].data,initHelp=data[2].data,fitConfig=data[3].data}),getInitPhysicsList:function(){return initPhysicsList},getEventGeneratorList:function(){return eventGeneratorList},getHelp:function(){return initHelp},getFitConfig:function(){return fitConfig}}}),lab.service("initDataService",function($http,$q){var initActionScorer={},gamosDataList=$http.get("dataJSON/data/gamosplugin.json"),scorerList=$http.get("dataJSON/data/scorers.json"),classifierList=$http.get("dataJSON/data/classifiers.json"),filterList=$http.get("dataJSON/data/filters.json"),dataAnalysisList=$http.get("dataJSON/data/dataAnalysisList.json");return{promise:$q.all([gamosDataList,scorerList,classifierList,filterList,dataAnalysisList]).then(function(data){initActionScorer.actionList=data[0].data,initActionScorer.scorer=data[1].data,initActionScorer.classifierList=data[2].data,initActionScorer.filterList=data[3].data,initActionScorer.dataAnalysisList=data[4].data}),getInitActionScorer:function(){return initActionScorer}}}),lab.service("initGeomService",function($http,$q){var initGeom={},posrot=$http.get("dataJSON/geometry/posrot.json"),parameterisation=$http.get("dataJSON/geometry/parameterisation.json"),magneticField=$http.get("dataJSON/geometry/magneticField.json"),electricField=$http.get("dataJSON/geometry/electricField.json");return{promise:$q.all([posrot,parameterisation,magneticField,electricField]).then(function(data){initGeom.posrot=data[0].data,initGeom.parameterisation=data[1].data,initGeom.magneticField=data[2].data,initGeom.electricField=data[3].data}),getInitGeom:function(){return initGeom}}}),lab.service("modelExperimentService",function($http,$q){var experiment={},pythiaData={},expModel=$http.get("dataJSON/experimentModel.json"),pythiaDataModel=$http.get("dataJSON/pythiaDataModel.json");return{promise:$q.all([expModel,pythiaDataModel]).then(function(data){experiment=data[0].data,pythiaData=data[1].data}),getExperiment:function(){return experiment},getPythiaData:function(){return pythiaData}}}),lab.service("modelPythiaService",function($http,$q){var pythiaStatus=[],pythiaStatusNodes=$http.get("dataJSON/data/pythiaStatusNodes.json");return{promise:$q.all([pythiaStatusNodes]).then(function(data){pythiaStatus=data[0].data}),getStatus:function(){return pythiaStatus}}}),lab.service("modelSolidService",function($http,$q){var modelSolidList=[],materialList=[],box=$http.get("dataJSON/geometry/solids/box.json"),cons=$http.get("dataJSON/geometry/solids/cons.json"),sphere=$http.get("dataJSON/geometry/solids/sphere.json"),tube=$http.get("dataJSON/geometry/solids/tube.json"),tubs=$http.get("dataJSON/geometry/solids/tubs.json"),simple=$http.get("dataJSON/geometry/materials/simple.json"),compound=$http.get("dataJSON/geometry/materials/compound.json"),nuclearMaterials=$http.get("dataJSON/geometry/materials/hepMaterials.json"),scintillator=$http.get("dataJSON/geometry/materials/scintillator.json");return{promise:$q.all([box,cons,sphere,tube,tubs,simple,compound,nuclearMaterials,scintillator]).then(function(data){modelSolidList=modelSolidList.concat(data[0].data,data[1].data,data[2].data,data[3].data,data[4].data);var simpleM={materialType:"simple",materialList:data[5].data},compoundM={materialType:"compound",materialList:data[6].data},nuclearM={materialType:"HEP materials",materialList:data[7].data},scintillatorM={materialType:"scintillator",materialList:data[8].data};materialList=materialList.concat(simpleM,compoundM,nuclearM,scintillatorM)}),getModelSolid:function(){return modelSolidList},getMaterialList:function(){return materialList}}}),lab.service("modelSourceService",function($http,$q){var leptons=$http.get("dataJSON/sources/particles/leptons.json"),mesons=$http.get("dataJSON/sources/particles/mesons.json"),baryons=$http.get("dataJSON/sources/particles/baryons.json"),others=$http.get("dataJSON/sources/particles/others.json"),ions=$http.get("dataJSON/sources/particles/ions.json"),elements=$http.get("dataJSON/sources/particles/elements.json"),gamosIso=$http.get("dataJSON/sources/particles/isotopes.json"),particleList={},distributionList=[],pythia={},energyDistribution=$http.get("dataJSON/sources/distributions/energyDistribution.json"),positionDistribution=$http.get("dataJSON/sources/distributions/positionDistribution.json"),directionDistribution=$http.get("dataJSON/sources/distributions/directionDistribution.json"),timeDistribution=$http.get("dataJSON/sources/distributions/timeDistribution.json"),pythiaData=$http.get("dataJSON/sources/pythiaData.json");return{promise:$q.all([others,leptons,mesons,baryons,ions,elements,gamosIso,energyDistribution,positionDistribution,directionDistribution,timeDistribution,pythiaData]).then(function(data){var particles={};particles.others=data[0].data,particles.leptons=data[1].data,particles.mesons=data[2].data,particles.baryons=data[3].data,particles.ions=data[4].data;var isotopes=data[5].data,gamosIsotopes=data[6].data;particleList.particles=particles,particleList.isotopes=isotopes,particleList["GAMOS isotopes"]=gamosIsotopes,distributionList=[data[7].data,data[8].data,data[9].data,data[10].data],pythia=data[11]}),getParticleList:function(){return particleList},getDistributionList:function(){return distributionList},getPythiaData:function(){return pythia}}}),lab.service("pageListService",function($http,$q){var pageList,pages=$http.get("dataJSON/pageList.json");return{promise:$q.all([pages]).then(function(data){pageList=data[0].data}),getPageList:function(){return pageList}}});