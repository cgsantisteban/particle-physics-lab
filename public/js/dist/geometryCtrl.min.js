"use strict";lab.controller("GeometryCtrl",function($rootScope,$scope,$location,validate,utilities,errorListService,genericService,modelExperimentService,initGeomService,modelSourceService,buildMacro,buildGeom,$uibModal,$window){function updateExperiment(deletedVolume,experiment){for(var newExperiment={newSourceList:[],removeSourceList:[],newFilterList:[],newScorerList:[],removeScorerList:[]},newSourceList=[],removeSourceList=[],volumeName=deletedVolume.name,_i4=0;_i4<experiment.sourceList.length;_i4++){var source=experiment.sourceList[_i4];"Volume"===source.distributions.Position.type||"Volume surface"===source.distributions.Position.type?volumeName!==source.distributions.Position.parameters.volume.value?newSourceList.push(source):removeSourceList.push(source.name):newSourceList.push(source)}newExperiment.newSourceList=newSourceList,newExperiment.removeSourceList=removeSourceList;for(var newFilterList=[],_i5=0;_i5<$rootScope.experiment.data.filterList.length;_i5++){var filter=experiment.data.filterList[_i5];if("Flux"===filter.type)if(filter.parameters[0].value!==deletedVolume.name)newFilterList.push(filter);else{for(var ii=0;ii<experiment.data.actionList.length;ii++){var pos=experiment.data.actionList[ii].filterList.indexOf(filter);pos>=0&&experiment.data.actionList[ii].filterList.splice(pos,1)}for(var iii=0;iii<experiment.data.scorerList.length;iii++){var _pos=experiment.data.scorerList[iii].filterList.indexOf(filter);_pos>=0&&experiment.data.scorerList[iii].filterList.splice(_pos,1)}}else newFilterList.push(filter)}newExperiment.newFilterList=newFilterList;for(var newScorerList=[],removeScorerList=[],iv=0;iv<experiment.data.scorerList.length;iv++){var scorer=experiment.data.scorerList[iv];scorer.volume!==deletedVolume.name?newScorerList.push(scorer):removeScorerList.push(scorer.name)}return newExperiment.newScorerList=newScorerList,newExperiment.removeScorerList=removeScorerList,newExperiment}function validateGeometry(volumeList){for(var isValidGeometry={},_i6=0;_i6<volumeList.length;_i6++){var _v2=volumeList[_i6];if(!_v2.isWorld){var isValidVolume={isValidPosRot:{},isValidParam:{}};isValidVolume.isValidPosRot=validate.validateVolume(_v2),_v2.isParam&&(isValidVolume.isValidParam=validate.validateParameterisation(_v2.parameterisation.parameters)),isValidGeometry[_v2.name]=isValidVolume}}return isValidGeometry}function getIsValidVolume(isValidVolume){var isValid=!0,isValidPosRot=isValidVolume.isValidPosRot,isValidPosition=!0,isValidRotation=!0,isValidOpacity=isValidPosRot.isValidOpacity;for(var coord in isValidPosRot.isValidPosition)isValidPosition=isValidPosition&&isValidPosRot.isValidPosition[coord];for(var _coord in isValidPosRot.isValidRotation)isValidRotation=isValidRotation&&isValidPosRot.isValidRotation[_coord];if(isValid=isValidRotation&&isValidPosition&&isValidOpacity,!_.isEmpty(isValidVolume.isValidParam)){var isValidParam=isValidVolume.isValidParam;for(var p in isValidParam)isValid=isValid&&isValidParam[p].isValid}return isValid}errorListService.getErrorList();$scope.isViewGeomCommand=!0,$scope.isViewSourceCommand=!0,$rootScope.$watch("experiment.geometry.volumeList",function(newVolumeList,oldVolumeList){$rootScope.isSaved=!1,$scope.geomCommands=[],$rootScope.isValidExperiment.isValidVolumes&&($scope.geomCommands=buildGeom.buildGeomCommands(newVolumeList))},!0);var initGeomData=initGeomService.getInitGeom(),initPhysicsList=genericService.getInitPhysicsList(),eventList=genericService.getEventGeneratorList();if($scope.eventGeneratorList=[],_.find(initPhysicsList.physicsList,function(phy){return phy.lib===$rootScope.experiment.physicsLib}).isPythia?$scope.eventGeneratorList=eventList:$scope.eventGeneratorList=_.filter(eventList,function(e){return!e.isPythia}),$rootScope.experiment.isPythia?$scope.selectedGenerator=$scope.eventGeneratorList[1]:$scope.selectedGenerator=$scope.eventGeneratorList[0],$scope.getIsFull=function(){return $window.document.webkitIsFullScreen},$scope.$watch($scope.getIsFull,function(newIsFull,oldIsFull){$scope.isFull=newIsFull},!0),$scope.isValidPosRot={position:{},rotation:{},opacity:!0},void 0===$rootScope.isIn){$rootScope.isIn={};for(var i=0;i<$rootScope.experiment.geometry.volumeList.length;i++){var v=$rootScope.experiment.geometry.volumeList[i];if(v.isParam){var isInParam={isValid:!0};$rootScope.isIn[v.name]=isInParam}}}$scope.initParam=function(v,paramType){if(v.isParam){var _isInParam={isValid:!0};$rootScope.isIn[v.name]=_isInParam,v.parameterisation=$scope.getParametersitation(v.solid.solidType)[0]}else delete $rootScope.isIn[v.name],delete v.parameterisation},$scope.getParametersitation=function(volumeType){var parameterisation=angular.copy(initGeomData.parameterisation);return"BOX"!==volumeType&&(parameterisation=_.filter(parameterisation,function(p){return"PHANTOM"!==p.type})),parameterisation},$scope.addVolume=function(size,_volumeId){$scope.volumeId=_volumeId,$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/geometry/newVolume.html",controller:"VolumeCtrl",size:size,resolve:{volumeId:function(){return _volumeId}}}).result.then(function(volume){if($scope.volumeId<0)volume.isParent=!1,$rootScope.experiment.geometry.volumeList.push(volume);else{for(var oldVolume=$rootScope.experiment.geometry.volumeList[$scope.volumeId].name,oldType=$rootScope.experiment.geometry.volumeList[$scope.volumeId].solid.solidType,newVolume=volume.name,newType=volume.solid.solidType,_i2=0;_i2<$rootScope.experiment.data.filterList.length;_i2++){var filter=$rootScope.experiment.data.filterList[_i2];"Flux"===filter.type&&filter.parameters[0].value===oldVolume&&($rootScope.experiment.data.filterList[_i2].parameters[0].value=newVolume)}var newScorerList=[];$scope.removeScorers=[];for(var ii=0;ii<$rootScope.experiment.data.scorerList.length;ii++){var scorer=$rootScope.experiment.data.scorerList[ii];scorer.volume===oldVolume?"GmPSSurfaceFlux"!==scorer.data.gamosName||oldType===newType&&"CONS"!==newType?(scorer.volume=newVolume,newScorerList.push(scorer)):$scope.removeScorers.push(scorer.name):newScorerList.push(scorer)}$rootScope.experiment.data.scorerList=newScorerList,$rootScope.experiment.geometry.volumeList[$scope.volumeId]=volume}},function(cancel){})},$scope.cloneVolume=function(volumeId){var newVolume=angular.copy($rootScope.experiment.geometry.volumeList[volumeId]);newVolume.name=utilities.generateName($rootScope.experiment.geometry.volumeList,"volume"),$rootScope.experiment.geometry.volumeList.push(newVolume)},$scope.showDelSource=!1,$scope.newSourceData={newSourceList:[],removeSourceList:[],newFilterList:[],newScorerList:[],removeScorerList:[]},$scope.delVolume=function(volumeName){var deletedVolume=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.name===volumeName});if(void 0!==deletedVolume){$scope.newSourceData=updateExperiment(deletedVolume,$rootScope.experiment),$scope.newSourceData.removeSourceList.length>0&&($rootScope.experiment.sourceList=$scope.newSourceData.newSourceList),$rootScope.experiment.sourceList.length<=0?$rootScope.isValidExperiment.isValidSources=!1:$rootScope.isValidExperiment.isValidSources=!0,$rootScope.experiment.data.filterList=$scope.newSourceData.newFilterList,$scope.newSourceData.removeScorerList.length>0&&($rootScope.experiment.data.scorerList=$scope.newSourceData.newScorerList);for(var son=null,_i3=0;_i3<$rootScope.experiment.geometry.volumeList.length;_i3++){var volume=$rootScope.experiment.geometry.volumeList[_i3];if(volume.isParam&&volume.parentVolume===deletedVolume.name){son=volume;break}}if(null!==son){var sonSourceData=updateExperiment(deletedVolume,$rootScope.experiment);sonSourceData.removeSourceList.length>0&&($rootScope.experiment.sourceList=sonSourceData.newSourceList),$rootScope.experiment.data.filterList=sonSourceData.newFilterList,sonSourceData.removeScorerList.length>0&&($rootScope.experiment.data.scorerList=sonScorerList)}deletedVolume.isWorld||(delete $rootScope.isValidGeometry[deletedVolume.name],$rootScope.experiment.geometry.volumeList=_.filter($rootScope.experiment.geometry.volumeList,function(v){return v.name!==volumeName})),null!==son&&(delete $rootScope.isValidGeometry[son.name],$rootScope.experiment.geometry.volumeList=_.filter($rootScope.experiment.geometry.volumeList,function(v){return v.name!==son.name}))}},$scope.showErrorVolume=function(volumeName,isValidGeometry,isIn){return!getIsValidVolume(isValidGeometry[volumeName])},$rootScope.$watch("experiment.geometry.volumeList",function(newVolumeList,oldVolumeList){$rootScope.isValidGeometry=validateGeometry(newVolumeList)},!0),$rootScope.$watch("isValidGeometry",function(newIsValid,oldIsValid){var isValidGeometry=newIsValid;$rootScope.isValidExperiment.isValidVolumes=!0;for(var _v3 in isValidGeometry)if($rootScope.isValidExperiment.isValidVolumes=getIsValidVolume(isValidGeometry[_v3]),!$rootScope.isValidExperiment.isValidVolumes)break;$rootScope.isValidAll=!0;for(var k in $rootScope.isValidExperiment)if($rootScope.isValidAll=$rootScope.isValidAll&&$rootScope.isValidExperiment[k],!$rootScope.isValidAll)break},!0)}),lab.controller("PythiaCtrl",function($scope,modelSourceService,validate,$uibModalInstance,pythiaDataId){var sourceList=modelSourceService.getParticleList(),particles=sourceList.particles,pythiaData=(Object.keys(particles),angular.copy(modelSourceService.getPythiaData()));$scope.pythiaData=pythiaData.data,$scope.windowTitle=pythiaDataId<0?"New pythia data":"Edit pythia data",$scope.allParticles=[];for(var particleType in particles)$scope.allParticles=$scope.allParticles.concat(particles[particleType]);pythiaDataId<0?($scope.pythiaHistogram={},$scope.pythiaHistogram.particle=$scope.allParticles[0],$scope.pythiaHistogram.data=angular.copy(pythiaData.data.dataList[0])):$scope.pythiaHistogram=$scope.experiment.pythiaData.pythiaHistograms[pythiaDataId],$scope.addPythiaData=function(){$uibModalInstance.close($scope.pythiaHistogram)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.isValidHistogram={},$scope.isValidHistogram=validate.validateHistogram($scope.pythiaHistogram.data),$scope.isValidAll=!0,$scope.$watch("pythiaHistogram.data",function(newData,oldData){$scope.isValidHistogram={},$scope.isValidHistogram=validate.validateHistogram(newData),$scope.isValidAll=$scope.isValidHistogram.isValidNbins.isValid&&$scope.isValidHistogram.isValidLimit[0].isValid&&$scope.isValidHistogram.isValidLimit[1].isValid},!0)}),lab.controller("VolumeCtrl",function($rootScope,$scope,initGeomService,modelSolidService,validate,utilities,volumeId,$uibModalInstance){function initParam(v){if(v.isParam){$scope.paramTypeList=getParametersitation(v.solid.solidType),v.parentVolume=$scope.parentList[0];var isInParam={isValid:!0};$rootScope.isIn[v.name]=isInParam,v.parameterisation=getParametersitation(v.solid.solidType)[0]}else v.parentVolume=world.name,delete $rootScope.isIn[v.name],delete v.parameterisation}function getParametersitation(solidType){var parameterisation=angular.copy(initGeomData.parameterisation);return"BOX"!==solidType&&(parameterisation=_.filter(parameterisation,function(p){return"PHANTOM"!==p.type})),parameterisation}function getParentList(volume,volumeList){for(var initialParentList=[],i=0;i<volumeList.length;i++){var v=volumeList[i];volume.name!==v.name&&(v.isWorld||v.isParam||initialParentList.push(v.name))}for(var selectedParentList=[],_i7=0;_i7<volumeList.length;_i7++)volumeList[_i7].name!=volume.name&&volumeList[_i7].isParam&&selectedParentList.push(volumeList[_i7].parentVolume);return _.difference(initialParentList,selectedParentList)}var initGeomData=initGeomService.getInitGeom();angular.copy(initGeomData.parameterisation);$scope.magneticField=angular.copy(initGeomData.magneticField),$scope.materials=angular.copy(modelSolidService.getMaterialList()),$scope.solidList=angular.copy(modelSolidService.getModelSolid()),$scope.solidTypeList=_.map($scope.solidList,"solidType"),$scope.materialTypeList=_.map($scope.materials,"materialType");var world=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.isWorld});if(volumeId<0){$scope.windowTitle="New volume",$scope.paramTypeList=[];var materialType=($scope.solidTypeList[0],$scope.materials[0].materialType),material=$scope.materials[0].materialList[0],position=angular.copy(initGeomData.posrot.position),rotation=angular.copy(initGeomData.posrot.rotation);$scope.volume={name:utilities.generateName($scope.experiment.geometry.volumeList,"volume"),solid:$scope.solidList[0],materialType:materialType,material:material,color:"#ff0000",isWorld:!1,isParam:!1,position:position,rotation:rotation,opacity:1},void 0!==world&&($scope.volume.parentVolume=world.name)}else $scope.windowTitle="Edit volume",$scope.volume=angular.copy($scope.experiment.geometry.volumeList[volumeId]),$scope.volume.isParam&&($scope.paramTypeList=getParametersitation($scope.volume.solid.solidType));$scope.setMaterial=function(materialType,materials){var pos=_.findKey($scope.materials,{materialType:materialType});$scope.volume.material=materials[pos].materialList[0]},$scope.getMaterial=function(materialType,materials){return materials[_.findKey($scope.materials,{materialType:materialType})].materialList},$scope.parentList=getParentList($scope.volume,$rootScope.experiment.geometry.volumeList),$scope.setIsParam=function(v){initParam(v)},$scope.setParentList=function(volume,volumeList){$scope.parentList=getParentList(volume,volumeList)},$scope.isValidDimensions=validate.validateDimensions($scope.volume),$scope.$watch("volume",function(newVolume,oldVolume){$scope.isValidAll=!0,$scope.isValidName=validate.validateName($scope.experiment.geometry.volumeList,newVolume.name,volumeId,$rootScope.maxLength),$scope.isValidDimensions=validate.validateDimensions(newVolume);for(var d in $scope.isValidDimensions.dimensions)$scope.isValidAll=$scope.isValidAll&&$scope.isValidDimensions.dimensions[d]&&$scope.isValidName.isValid;if(newVolume.isParam){$scope.isValidParam=validate.validateParameterisation(newVolume.parameterisation.parameters);for(var p in $scope.isValidParam)$scope.isValidAll=$scope.isValidAll&&$scope.isValidParam[p].isValid}},!0),$scope.addVolume=function(){if($scope.volume.isParam&&"PHANTOM"===$scope.volume.parameterisation.type&&"BOX"!==$scope.volume.solid.solidType&&($scope.volume.isParam=!1,delete $scope.volume.parameterisation),$scope.volume.isWorld)for(var i=0;i<$rootScope.experiment.geometry.volumeList.length;i++)$rootScope.experiment.geometry.volumeList[i].isWorld||($rootScope.experiment.geometry.volumeList[i].parentVolume=$scope.volume.name);$uibModalInstance.close($scope.volume)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}});