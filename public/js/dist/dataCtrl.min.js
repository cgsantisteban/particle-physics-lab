"use strict";lab.controller("DataCtrl",function($scope,$location){"scorers"==$location.search().tab?$scope.active=1:"filters"==$location.search().tab?$scope.active=2:$scope.active=0}),lab.controller("ActionCtrl",function($rootScope,$scope,initDataService,initExperiment,utilities,validate,buildMacro,$uibModal,$location){$scope.isViewMacro=!0;var initDataList=initDataService.getInitActionScorer();$scope.initActionList=initDataList.actionList,$scope.initClassifierList=initDataList.classifierList,$scope.initActionTypeList=_.map($scope.initActionList,"type"),$scope.actionTypeList=[];var selectedTypeAction=void 0;$rootScope.experiment.data.actionList.length<=0?$scope.actionTypeList=angular.copy($scope.initActionTypeList):selectedTypeAction=_.map($rootScope.experiment.data.actionList,"actionType"),$scope.addAction=function(actionType){var action={name:utilities.generateName($rootScope.experiment.data.actionList,"action"),actionType:actionType,dataList:[],classifierList:[],filterList:[]};$rootScope.experiment.data.actionList.push(action);var isValidName={isValid:!0};$scope.isValidNameList.push(isValidName)},$scope.delAction=function(actionId){actionId>-1&&$rootScope.experiment.data.actionList.splice(actionId,1)},$scope.clearDataList=function(id){$rootScope.experiment.data.actionList[id].dataList=[]},$scope.addActionData=function(size,_actionType,_actionId,_dataId){$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/data/actions/newActionData.html",controller:"ActionDataCtrl",size:size,resolve:{actionType:function(){return _actionType},actionId:function(){return _actionId},dataId:function(){return _dataId}}}).result.then(function(data){_dataId<0?$rootScope.experiment.data.actionList[_actionId].dataList.push(data):$rootScope.experiment.data.actionList[_actionId].dataList[_dataId]=data},function(cancel){})},$scope.delData=function(actionId,dataId){$rootScope.experiment.data.actionList[actionId].dataList.splice(dataId,1)},$scope.isCounter=function(data){var isC=!1;return void 0!==data&&"StackCounter"===data.gamosName&&void 0!==data.particleList&&data.particleList.length>0&&(isC=!0),isC},$scope.getElementList=utilities.getElementList,$scope.delElement=utilities.delElement,$scope.addElement=utilities.addElement,$scope.isValidNameList=[];for(var i=0;i<$rootScope.experiment.data.actionList.length;i++){var action=$rootScope.experiment.data.actionList[i],isValidName=validate.validateName($rootScope.experiment.data.actionList,action.name,i,$rootScope.maxLength);$scope.isValidNameList.push(isValidName)}$rootScope.$watch("experiment.data.actionList",function(newActionList,oldActionList){$scope.isValidAllAction=!0,selectedTypeAction=_.map(newActionList,"actionType"),$scope.actionTypeList=[];for(var _i=0;_i<$scope.initActionTypeList.length;_i++){var aType=$scope.initActionTypeList[_i];selectedTypeAction.indexOf(aType)<0&&$scope.actionTypeList.push(aType)}for(var _i2=0;_i2<newActionList.length;_i2++){var _isValidName=validate.validateName(newActionList,newActionList[_i2].name,_i2,$rootScope.maxLength);$scope.isValidNameList[_i2]=_isValidName,$scope.isValidAllAction=$scope.isValidAllAction&&_isValidName.isValid&&newActionList[_i2].dataList.length>0}$rootScope.isValidExperiment.isValidActions=$scope.isValidAllAction,$rootScope.isValidAll=!0;for(var k in $rootScope.isValidExperiment)$rootScope.isValidAll=$rootScope.isValidAll&&$rootScope.isValidExperiment[k];if($rootScope.isSaved=!1,$scope.isValidAllAction){$scope.commandList=[];for(var _i3=0;_i3<newActionList.length;_i3++){var nameString="#"+newActionList[_i3].name;$scope.commandList.push(nameString),$scope.commandList=$scope.commandList.concat(buildMacro.buildGAMOSData(newActionList[_i3]))}}},!0)}),lab.controller("ActionDataCtrl",function($rootScope,$scope,initDataService,validate,modelSourceService,$uibModalInstance,actionType,actionId,dataId){var particleList=modelSourceService.getParticleList().particles;$scope.particles=[];for(var type in particleList)$scope.particles=$scope.particles.concat(particleList[type]);var initDataList=initDataService.getInitActionScorer(),actionList=initDataList.actionList,dataList=[],actionSelected=_.find(actionList,function(a){return a.type===actionType});void 0!==actionSelected&&(dataList=angular.copy(actionSelected.dataList),$scope.dataList=angular.copy(dataList)),$scope.limitLabel=[["Min. X Axis","Max. X Axis"],["Min. Y Axis","Max. Y Axis"]],$scope.dimensionList=["1D","2D"],$scope.windowTitle=dataId<0?"New GAMOS data":"Edit GAMOS data",$scope.data={},dataId<0?($scope.data={dimension:$scope.dimensionList[0],data:[angular.copy(dataList[0])]},"Stack"===actionSelected.type&&($scope.data.data[0].particle=$scope.particles[1])):$scope.data=$rootScope.experiment.data.actionList[actionId].dataList[dataId],$scope.setData=function(data){data.data=[],"1D"===data.dimension?data.data=[angular.copy(dataList[0])]:data.data=[angular.copy(dataList[0]),angular.copy(dataList[1])]},$scope.isValidHistogram=[];for(var i=0;i<$scope.data.length;i++)$scope.isValidHistogram.push(validate.validateHistogram(data[i]));$scope.$watch("data.data",function(newData,oldData){$scope.isValidHistogram=[];for(var _i4=0;_i4<newData.length;_i4++)$scope.isValidHistogram.push(validate.validateHistogram(newData[_i4]));$scope.isValidAll=!0;for(var _i5=0;_i5<$scope.isValidHistogram.length;_i5++)$scope.isValidAll=$scope.isValidAll&&$scope.isValidHistogram[_i5].isValidNbins.isValid&&$scope.isValidHistogram[_i5].isValidLimit[0].isValid&&$scope.isValidHistogram[_i5].isValidLimit[1].isValid},!0),$scope.addData=function(){$uibModalInstance.close($scope.data)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel add data")}}),lab.controller("FilterCtrl",function($rootScope,$scope,modelSourceService,utilities,buildMacro,$uibModal){$scope.isViewMacro=!0,$scope.addFilter=function(size,_filterId){$scope.filterId=_filterId,$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/data/filters/newFilter.html",controller:"FilterDataCtrl",size:size,resolve:{filterId:function(){return _filterId}}}).result.then(function(filter){if(_filterId<0)$rootScope.experiment.data.filterList.push(filter);else{for(var oldFilter=$rootScope.experiment.data.filterList[$scope.filterId],newFilter=filter,i=0;i<$rootScope.experiment.data.actionList.length;i++){var pos=$rootScope.experiment.data.actionList[i].filterList.indexOf(oldFilter);pos>=0&&($rootScope.experiment.data.actionList[i].filterList[pos]=newFilter)}for(var _i6=0;_i6<$rootScope.experiment.data.scorerList.length;_i6++){var _pos=$rootScope.experiment.data.scorerList[_i6].filterList.indexOf(oldFilter);_pos>=0&&($rootScope.experiment.data.scorerList[_i6].filterList[_pos]=newFilter)}$rootScope.experiment.data.filterList[_filterId]=filter}$rootScope.isSaved=!1},function(cancel){})},$scope.delFilter=function(filterId){for(var filter=$rootScope.experiment.data.filterList[filterId],i=0;i<$rootScope.experiment.data.actionList.length;i++){var pos=$rootScope.experiment.data.actionList[i].filterList.indexOf(filter);pos>-1&&$rootScope.experiment.data.actionList[i].filterList.splice(pos,1)}for(var _i7=0;_i7<$rootScope.experiment.data.scorerList.length;_i7++){var _pos2=$rootScope.experiment.data.scorerList[_i7].filterList.indexOf(filter);_pos2>-1&&$rootScope.experiment.data.scorerList[_i7].filterList.splice(_pos2,1)}$rootScope.experiment.data.filterList.splice(filterId,1),$rootScope.isSaved=!1};var sourceList=modelSourceService.getParticleList();$scope.particles=sourceList.particles,$scope.getParticleName=utilities.getParticleName,$rootScope.$watch("experiment.data.filterList",function(newFilterList,oldFilterList){for(var macroFilter=[],i=0;i<newFilterList.length;i++){macroFilter.push("#"+newFilterList[i].name);var command=buildMacro.buildFilter(newFilterList[i]);macroFilter=macroFilter.concat(command)}$scope.commandList=macroFilter},!0)}),lab.controller("FilterDataCtrl",function($rootScope,$scope,initDataService,modelSourceService,genericService,utilities,validate,$uibModalInstance,filterId){var initDataList=initDataService.getInitActionScorer(),initPhysicsList=genericService.getInitPhysicsList(),sourceList=modelSourceService.getParticleList();$scope.windowTitle=filterId<0?"New filter":"Edit filter",$scope.initFilterList=angular.copy(initDataList.filterList);var filterTypeMap=_.map($scope.initFilterList,"type");$scope.filterTypeList=_.uniq(filterTypeMap),$scope.filterID=filterId,$scope.subtypeList=[],$scope.parameters=[],filterId<0?($scope.filterType=$scope.filterTypeList[0],$scope.myFilter=_.find($scope.initFilterList,function(f){return f.type=$scope.filterType}),$scope.filterName=utilities.generateName($rootScope.experiment.data.filterList,"filter"),$scope.myFilter.name=$scope.filterName):($scope.myFilter=angular.copy($rootScope.experiment.data.filterList[filterId]),$scope.filterName=$scope.myFilter.name,$scope.filterType=$scope.myFilter.type),$scope.setFilter=function(filterType){$scope.myFilter=_.find($scope.initFilterList,function(f){return filterType===f.type})},$scope.getOptions=function(paramType){var options=[];if("selectParticle"===paramType){var particles=sourceList.particles;for(var key in particles)options=options.concat(particles[key])}if("selectProcess"===paramType){var physicsLib=_.find(initPhysicsList.physicsList,function(physics){return physics.lib===$rootScope.experiment.physicsLib});void 0!==physicsLib&&(options=physicsLib.processList)}return"selectFlux"===paramType&&(options=$rootScope.experiment.geometry.volumeList),options},$scope.isValidAll=!0,$scope.isValidFilter={},$scope.$watch("filterName",function(newName,oldName){if($scope.isValidFilter.name=validate.validateName($rootScope.experiment.data.filterList,newName,filterId,$rootScope.maxLength),$scope.isValidAll=!0,void 0!==$scope.isValidFilter.parameters){for(var i=0;i<$scope.isValidFilter.parameters.length;i++){var isValidParam=$scope.isValidFilter.parameters[i].isValid;$scope.isValidAll=$scope.isValidAll&&isValidParam}$scope.isValidAll=$scope.isValidAll&&$scope.isValidFilter.name.isValid}else $scope.isValidAll=$scope.isValidAll&&$scope.isValidFilter.name.isValid},!0),$scope.$watch("myFilter.parameters",function(newParameters,oldParameters){var isValidParameters=[];isValidParameters=validate.validateParamFilter(newParameters),$scope.isValidFilter.parameters=isValidParameters,$scope.isValidAll=!0;for(var i=0;i<$scope.isValidFilter.parameters.length;i++){var isValidParam=$scope.isValidFilter.parameters[i].isValid;$scope.isValidAll=$scope.isValidAll&&isValidParam}$scope.isValidAll=$scope.isValidAll&&$scope.isValidFilter.name.isValid},!0),$scope.addFilter=function(){$scope.myFilter.name=$scope.filterName,$uibModalInstance.close($scope.myFilter)},$scope.cancel=function(){$scope.errorFilter="filter cancelado",$uibModalInstance.dismiss($scope.errorFilter)}}),lab.controller("ScorerCtrl",function($rootScope,$scope,initDataService,utilities,buildMacro,$uibModal){$scope.isViewMacro=!0;var initDataList=initDataService.getInitActionScorer();$scope.initScorerList=initDataList.scorerList,$scope.initClassifierList=initDataList.classifierList,$scope.addScorer=function(size,_scorerId){$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/data/scorers/newScorerData.html",controller:"ScorerDataCtrl",size:size,resolve:{scorerId:function(){return _scorerId}}}).result.then(function(scorer){_scorerId<0?$rootScope.experiment.data.scorerList.push(scorer):$rootScope.experiment.data.scorerList[_scorerId]=scorer,$rootScope.isSaved=!1},function(cancel){console.log(cancel)})},$scope.getElementList=utilities.getElementList,$scope.delElement=utilities.delElement,$scope.addElement=utilities.addElement,$scope.delScorer=function(scorerId){$rootScope.experiment.data.scorerList.splice(scorerId,1)},$scope.$watch("experiment.data.scorerList",function(newScorerList,oldScorerList){$scope.commandList=buildMacro.buildScorers(newScorerList,$rootScope.experiment.geometry.volumeList),$rootScope.isSaved=!1},!0)}),lab.controller("ScorerDataCtrl",function($rootScope,$scope,initDataService,utilities,validate,errorListService,$uibModalInstance,scorerId){function getScorerTypeList(scorerList,volumeName){for(var typeList=[],volume=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.name===volumeName}),i=0;i<scorerList.length;i++)"GmPSSurfaceFlux"===scorerList[i].gamosName&&"CONS"===volume.solid.solidType||typeList.indexOf(scorerList[i].type)<0&&typeList.push(scorerList[i].type);return typeList}function getDataList(scorerType,scorerList){for(var dataList=[],i=0;i<scorerList.length;i++)scorerType===scorerList[i].type&&dataList.push(scorerList[i]);return dataList}var errorMessageList=errorListService.getErrorList();$scope.windowTitle=scorerId<0?"New scorer":"Edit scorer",$scope.volumeList=$rootScope.experiment.geometry.volumeList;var initDataList=initDataService.getInitActionScorer();$scope.scorerList=angular.copy(initDataList.scorer.scorerList),$scope.fluxTypeList=angular.copy(initDataList.scorer.fluxTypeList),$scope.fluxSurfaceList=angular.copy(initDataList.scorer.fluxSurfaceList),$scope.scorerId=scorerId,$scope.dataList=[],$scope.scorer={},scorerId<0?($scope.scorer={name:utilities.generateName($rootScope.experiment.data.scorerList,"scorer"),volume:$scope.volumeList[0].name,classifierList:[],filterList:[]},$scope.typeList=getScorerTypeList($scope.scorerList,$scope.scorer.volume),$scope.scorerType=$scope.typeList[0],$scope.dataList=getDataList($scope.scorerType,$scope.scorerList),$scope.scorer.data=$scope.dataList[0]):($scope.scorer=angular.copy($rootScope.experiment.data.scorerList[scorerId]),$scope.typeList=getScorerTypeList($scope.scorerList,$scope.scorer.volume),$scope.scorerType=$scope.scorer.data.type,$scope.dataList=getDataList($scope.scorerType,$scope.scorerList)),$scope.setData=function(scorerType,scorerList,scorerId){$scope.dataList=getDataList(scorerType,scorerList),$scope.scorer.data=$scope.dataList[0],"GmPSSurfaceFlux"===$scope.scorer.data.gamosName?($scope.scorer.data.fluxType=$scope.fluxTypeList[0],$scope.scorer.data.surfaceList=[]):(delete $scope.scorer.data.fluxType,delete $scope.scorer.data.surfaceList)},$scope.getSurfaceList=function(volumeName,fluxSurfaceList){var volume=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.name==volumeName}),fluxSurface={};return void 0!==volume&&(fluxSurface=_.find($scope.fluxSurfaceList,function(surface){return surface.solidType===volume.solid.solidType})),fluxSurface.surfaceList},$scope.addSurface=function(surface,surfaceList){var pos=surfaceList.indexOf(surface);pos<0?surfaceList.push(surface):surfaceList.splice(pos,1)},$scope.checkSurface=function(surface,surfaceList){var isSelected=!0;return surfaceList.indexOf(surface)<0&&(isSelected=!1),isSelected},$scope.changeVolume=function(scorerList,volume){$scope.typeList=getScorerTypeList(scorerList,volume),$scope.scorerType=$scope.typeList[0],$scope.dataList=getDataList($scope.scorerType,scorerList),$scope.scorer.data=$scope.dataList[0],void 0!==$scope.scorer.data.surfaceList&&($scope.scorer.data.surfaceList=[])};var isValidName={isValid:!0},isValidSurface={isValid:!0};$scope.isValidAll=!0,$scope.isValidScorer={isValidName:isValidName,isValidSurface:isValidSurface},$scope.$watch("scorer",function(newScorer,oldScorer){var scorerName=newScorer.name,isValidName=validate.validateName($rootScope.experiment.data.scorerList,scorerName,scorerId,$rootScope.maxLength);$scope.isValidScorer.isValidName=isValidName,"GmPSSurfaceFlux"===newScorer.data.gamosName?($scope.isValidScorer.isValidSurface.isValid=newScorer.data.surfaceList.length>0,$scope.isValidScorer.isValidSurface.isValid?delete $scope.isValidScorer.isValidSurface.errorMessages:$scope.isValidScorer.isValidSurface.errorMessages=errorMessageList.surfaceFlux):$scope.isValidScorer.isValidSurface={isValid:!0},$scope.isValidAll=!0;for(var key in $scope.isValidScorer)$scope.isValidAll=$scope.isValidAll&&$scope.isValidScorer[key].isValid},!0),$scope.addScorer=function(){$uibModalInstance.close($scope.scorer)},$scope.cancel=function(){$scope.errorScorer="scorer cancelado",$uibModalInstance.dismiss($scope.errorScorer)}});