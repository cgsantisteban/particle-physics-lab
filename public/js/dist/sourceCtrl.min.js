"use strict";lab.controller("NewSourceCtrl",function($rootScope,$scope,modelSourceService,validate,utilities,$uibModalInstance,sourceId){var sourceList=modelSourceService.getParticleList(),sourceType=Object.keys(sourceList),particles=sourceList.particles,particleTypeList=Object.keys(particles),isotopes=angular.copy(sourceList.isotopes),gamosIsotopes=angular.copy(sourceList["GAMOS isotopes"]),distributionList=angular.copy(modelSourceService.getDistributionList());angular.copy(modelSourceService.getPythiaData());if($scope.volumeList=_.filter($rootScope.experiment.geometry.volumeList,function(v){return!v.isWorld}),$scope.volumeList=_.map($scope.volumeList,"name"),$scope.sourceType=sourceType,$scope.particleTypeList=particleTypeList,$scope.particles=particles,$scope.isotopes=isotopes,$scope.gamosIsotopes=gamosIsotopes,$scope.distributionList=distributionList,$scope.windowTitle=sourceId<0?"New source":"Edit source",sourceId<0){$scope.source={},$scope.source.name=utilities.generateName($scope.experiment.sourceList,"source"),$scope.source.type=sourceType[0],$scope.source.particleType=particleTypeList[0],$scope.source.particle=particles.others[0],$scope.source.distributions={};for(var i=0;i<$scope.distributionList.length;i++){var key=$scope.distributionList[i].distributionType;$scope.source.distributions[key]=$scope.distributionList[i].distributions[0]}}else if($scope.source=angular.copy($scope.experiment.sourceList[sourceId]),"GAMOS isotopes"===$scope.source.type)for(var _i=0;_i<$scope.distributionList.length;_i++){var _key=$scope.distributionList[_i].distributionType;"Position"!==_key&&($scope.source.distributions[_key]=$scope.distributionList[_i].distributions[0])}$scope.setDefaultVolume=function(source,volumeList){"Volume"!==source.distributions.Position.type&&"Volume surface"!==source.distributions.Position.type||""==source.distributions.Position.parameters.volume.value&&(source.distributions.Position.parameters.volume.value=volumeList[0])},$scope.setSourceType=function(sourceType){sourceType===$scope.sourceType[0]&&($scope.source.particleType=particleTypeList[0],$scope.source.particle=particles.others[0]),sourceType===$scope.sourceType[1]&&(void 0!==$scope.source.particleType&&delete $scope.source.particleType,$scope.source.particle=isotopes[0]),sourceType===$scope.sourceType[2]&&(void 0!==$scope.source.particleType&&delete $scope.source.particleType,$scope.source.particle=gamosIsotopes[0])},$scope.setParticle=function(particleType){$scope.source.particle=particles[particleType][0]},$scope.isGAMOSIso=function(sourceType,distributionType){return"GAMOS isotopes"===sourceType&&"Position"===distributionType||"GAMOS isotopes"!==sourceType},$scope.isValidSource={},$scope.$watch("source",function(newSource,oldSource){$scope.isValidAllSource=!0,$scope.isValidName=validate.validateName($scope.experiment.sourceList,newSource.name,sourceId,$rootScope.maxLength),$scope.isValidSource=validate.validateSource(newSource);for(var d in $scope.isValidSource.isValidDistribution.errorDist)for(var e in $scope.isValidSource.isValidDistribution.errorDist[d])$scope.isValidAllSource=$scope.isValidAllSource&&$scope.isValidName.isValid&&$scope.isValidSource.isValidDistribution.errorDist[d][e];if("isotopes"===newSource.type)for(var param in $scope.isValidSource.isValidIsotope.errorIsotope)$scope.isValidAllSource=$scope.isValidAllSource&&$scope.isValidSource.isValidIsotope.errorIsotope[param];if("GAMOS isotopes"===newSource.type)for(var _param in $scope.isValidSource.isValidGamosIsotope.errorGamosIsotope)$scope.isValidAllSource=$scope.isValidAllSource&&$scope.isValidSource.isValidGamosIsotope.errorGamosIsotope[_param]},!0),$scope.addSource=function(){if("GAMOS isotopes"===$scope.source.type)for(var _i2=0;_i2<$scope.distributionList.length;_i2++){var _key2=$scope.distributionList[_i2].distributionType;"Position"!==_key2&&($scope.source.distributions[_key2]=null)}$uibModalInstance.close($scope.source)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}),lab.controller("SourceCtrl",function($rootScope,$scope,$location,validate,utilities,errorListService,genericService,modelExperimentService,initGeomService,modelSourceService,buildMacro,buildGeom,$uibModal,$window){errorListService.getErrorList();$scope.isViewGeomCommand=!0,$scope.isViewSourceCommand=!0,$rootScope.$watch("experiment.sourceList",function(newSourceList,oldSourceList){if($rootScope.isSaved=!1,$scope.sourceCommands=[],$rootScope.isValidExperiment.isValidSources)for(var i=0;i<newSourceList.length;i++){var commandSource=buildMacro.buildSource(newSourceList[i]);$scope.sourceCommands=$scope.sourceCommands.concat(commandSource)}},!0);initGeomService.getInitGeom();$scope.showDelSource=!1,$rootScope.experiment.isPythia||($rootScope.experiment.sourceList.length<=0?$rootScope.isValidExperiment.isValidSources=!1:$rootScope.isValidExperiment.isValidSources=!0),$scope.clearDelSource=function(){$scope.showDelSource=!1,$scope.deletedSourceList=[]},$scope.addSource=function(size,_sourceId){$scope.sourceId=_sourceId,$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/sources/newSource.html",controller:"NewSourceCtrl",size:size,resolve:{sourceId:function(){return _sourceId}}}).result.then(function(source){$scope.source=source,$scope.source.generatorType=$scope.selectedGenerator,$scope.sourceId<0?$rootScope.experiment.sourceList.push(source):$rootScope.experiment.sourceList[$scope.sourceId]=source,$rootScope.experiment.sourceList.length<=0?$rootScope.isValidExperiment.isValidSources=!1:$rootScope.isValidExperiment.isValidSources=!0},function(cancel){})},$scope.delSource=function(sourceId){sourceId>-1&&$rootScope.experiment.sourceList.splice(sourceId,1),$rootScope.experiment.sourceList.length<=0?$rootScope.isValidExperiment.isValidSources=!1:$rootScope.isValidExperiment.isValidSources=!0}});