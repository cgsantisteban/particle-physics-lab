"use strict";lab.controller("ActionHistogramCtrl",function($rootScope,$scope,$location,genericService,validate,utilities,socket){function resetFit(){$scope.isfit=!1,$scope.funclist=[],$scope.range=[],$scope.rangeTotalFit.minbinfit=$scope.xmin,$scope.rangeTotalFit.maxbinfit=$scope.xmax,$scope.isValidRangeFit=[],$scope.isValidRangeFuncTotal={min:!0,max:!0},$scope.fitJSON=null}function initHistogramList(dataClassList){if(void 0!==dataClassList){$scope.isfit&&(resetFit(),$scope.isfit=!1),$scope.dataClassList=dataClassList,$scope.selectedData=$scope.dataClassList.dataTypeList[0];var histogramList=getHistogramList($scope.selectedAction,$scope.dimension);$scope.drawhistolist=[],$scope.drawhistolist.push(histogramList[0]),$scope.xmin=$scope.drawhistolist[0].minX,$scope.xmax=$scope.drawhistolist[0].maxX,$scope.nbins=$scope.drawhistolist[0].nbins,"stackCounter"===$scope.drawhistolist[0].type?$scope.stepInput=1:$scope.stepInputX=($scope.xmax-$scope.xmin)/10,"2D"===$scope.drawhistolist[0].dimension&&($scope.classifier2D=dataClassList.classifierList[0],$scope.ymin=$scope.drawhistolist[0].minY,$scope.ymax=$scope.drawhistolist[0].maxY,$scope.stepInputY=($scope.ymax-$scope.ymin)/10)}}function getDimensionList(action){var dimList=[];return action.histogramList.forEach(function(histo){dimList.indexOf(histo.dimension)<0&&dimList.push(histo.dimension)}),dimList}function getDataTypeList(actionName,actionHistograms,dimension){var actionData=_.find(actionHistograms,function(a){return a.actionName===actionName}),dataTypeList=[],classifierList=[];if(void 0!==actionData){getHistogramList(actionData,dimension).forEach(function(histogram){var classifierName=void 0;if(dimension===histogram.dimension){if("1D"===dimension){var dataName=histogram.labelX;dataTypeList.indexOf(dataName)<0&&dataTypeList.push(dataName)}if("2D"===dimension){var _dataName=histogram.labelX+".vs."+histogram.labelY;dataTypeList.indexOf(_dataName)<0&&dataTypeList.push(_dataName)}classifierName=histogram.dataClassifier}classifierList.indexOf(classifierName)<0&&null!==classifierName&&classifierList.push(classifierName)})}return{dataTypeList:dataTypeList,classifierList:classifierList}}function getHistogramList(action,dimension){var histoList=[];return action.histogramList.forEach(function(histo){histo.dimension===dimension&&histoList.push(histo)}),histoList}if(void 0===$rootScope.histograms.actionHistograms[0])return void $location.url("/");$scope.selectedAction=$rootScope.histograms.actionHistograms[0],$scope.dimList=getDimensionList($scope.selectedAction),$scope.dimension=$scope.dimList[0],initHistogramList(getDataTypeList($scope.selectedAction.actionName,$rootScope.histograms.actionHistograms,$scope.dimension)),$scope.setDataClass=function(actionName,actionHistograms){void 0!==$scope.selectedAction&&null!==$scope.selectedAction&&($scope.dimList=getDimensionList($scope.selectedAction),$scope.dimension=$scope.dimList[0],initHistogramList(getDataTypeList(actionName,actionHistograms,$scope.dimension)))},$scope.changeDimension=function(actionName,actionHistograms,dimension){initHistogramList(getDataTypeList(actionName,actionHistograms,dimension))},$scope.findHisto=function(histolist,dataName,classifier,dimension){var find=!1,pos=0;if("1D"===dimension)for(;!find&&pos<histolist.length;)void 0!==classifier?histolist[pos].labelX===dataName&&histolist[pos].dataClassifier===classifier?find=!0:pos++:histolist[pos].labelX===dataName?find=!0:pos++;if("2D"===dimension)for(var dataList=dataName.split(".vs."),dataX=dataList[0],dataY=dataList[1],_find=!1,_pos=0;!_find&&_pos<histolist.length;)void 0!==classifier?histolist[_pos].labelX===dataX&&histolist[_pos].labelY===dataY&&histolist[_pos].dataClassifier===classifier?_find=!0:_pos++:histolist[_pos].labelX===dataX&&histolist[_pos].labelY===dataY?_find=!0:_pos++;return pos},$scope.setClassifier=function(selectedAction,dataName,actionHistograms,dimension,classifier){$scope.dataClassList=getDataTypeList(selectedAction.actionName,actionHistograms,dimension);var histogramList=getHistogramList(selectedAction,dimension);$scope.drawhistolist=[],"1D"===dimension&&(classifier=$scope.dataClassList.classifierList[0]);var posHisto=$scope.findHisto(histogramList,dataName,classifier,dimension);$scope.drawhistolist.push(histogramList[posHisto]),$scope.xmin=$scope.drawhistolist[0].minX,$scope.xmax=$scope.drawhistolist[0].maxX,"2D"===dimension&&($scope.ymin=$scope.drawhistolist[0].minY,$scope.ymax=$scope.drawhistolist[0].maxY),"StackCounter"===$scope.drawhistolist[0].type?($scope.nbins=$scope.drawhistolist[0].nbins,$scope.stepInput=1):($scope.nbins=$scope.drawhistolist[0].nbins,$scope.stepInput=($scope.xmax-$scope.xmin)/10),resetFit()},$scope.addHisto=function(drawhistolist,selectedAction,dataName,classifier,dimension){resetFit();var histoData=getHistogramList(selectedAction,dimension),posH=$scope.findHisto(drawhistolist,dataName,classifier,dimension);if("1D"===dimension)if(posH>=$scope.drawhistolist.length){for(var find=!1,pos=0;!find&&pos<histoData.length;)histoData[pos].labelX===dataName&&histoData[pos].dataClassifier===classifier?find=!0:pos++;$scope.drawhistolist.push(histoData[pos])}else $scope.drawhistolist.splice(posH,1);if("2D"===dimension){var dataList=dataName.split(".vs."),dataX=dataList[0],dataY=dataList[1];if(posH>=$scope.drawhistolist.length){for(var _find2=!1,_pos2=0;!_find2&&_pos2<histoData.length;)histoData[_pos2].labelX===dataX&&histoData[_pos2].labelY===dataY&&histoData[_pos2].dataClassifier===classifier?_find2=!0:_pos2++;$scope.drawhistolist.push(histoData[_pos2])}else $scope.drawhistolist.splice(posH,1)}};var fitConfig=genericService.getFitConfig(),nPoints=fitConfig.nPoints;$scope.fitList=fitConfig.fitList;var outFitFile=fitConfig.outFitFile;$scope.isfit=!1,$scope.range=[],$scope.isValidRangeFit=[],$scope.fitFunc=$scope.fitList[0],$scope.funclist=[],$scope.rangeTotalFit={minbinfit:$scope.drawhistolist[0].minX,maxbinfit:$scope.drawhistolist[0].maxX},$scope.funcTotal="",$scope.isValidGrade={isValid:!0},$scope.initFunc=function(func){$scope.isValidGrade={isValid:!0},"polynomial"===func&&(this.grade=1)},$scope.validateGrade=function(grade){$scope.isValidGrade=validate.validateGrade(grade)},$scope.addFit=function(func,grade){"polynomial"===func&&(func="pol"+grade),$scope.funclist.push(func),$scope.funcTotal=utilities.getFuncTotal($scope.funclist);var isValid=[!0,!0];$scope.isValidRangeFit.push(isValid)},$scope.delFit=function(id){$scope.funclist.splice(id,1),$scope.range.splice(id,1),$scope.funcTotal=utilities.getFuncTotal($scope.funclist)},$scope.makeFit=function(){$scope.isfit=!1;for(var histogram=$scope.drawhistolist[0].histogram,funcList=$scope.funclist,rangeFit=[$scope.rangeTotalFit.minbinfit,$scope.rangeTotalFit.maxbinfit],range=[],i=0;i<$scope.range.length;i++){var init=$scope.range[i][0],end=$scope.range[i][1];range.push(init,end)}$scope.funcrange=range,1===$scope.funclist.length&&(rangeFit=range);var actionName=$scope.selectedAction.actionName,fitData={outFitFile:outFitFile,histogram:histogram,nPoints:nPoints,funcList:funcList,range:range,rangeFit:rangeFit,actionName:actionName};socket.emit("exp:Fit",fitData),this.fitFunc=this.fitList[0]},$scope.newFit=function(){resetFit()},$scope.fitJSON=null,socket.on("exp:outFit",function(data){$scope.isfit=!0,$scope.fitJSON=JSON.parse(data),$scope.$digest()}),$scope.getUnits=function(funcList,histoUnits){for(var totalUnits=[],i=0;i<funcList.length;i++){var f=funcList[i].charAt(0),units=[];if("e"===f&&(units[0]="",units[1]=histoUnits+"<sup>-1</sup>"),"g"===f&&(units[0]="",units[1]=histoUnits,units[2]=histoUnits),"p"===f){var grade=Number(funcList[i].slice(3));units[0]="";for(var ii=1;ii<=grade;ii++)units[ii]=histoList[ii]+"<sup>-"+ii+"</sup>"}totalUnits.push(units)}return totalUnits},$scope.$watch("range",function(newRange,oldRange){var xminHisto=$scope.drawhistolist[0].minX,xmaxHisto=$scope.drawhistolist[0].maxX,histogramType=$scope.drawhistolist[0].histogramType;$scope.isValidRangeFit=[],$scope.isValidAllFunc=!0,newRange.forEach(function(r){var isValidRange=validate.validateRangeFit(r[0],r[1],xminHisto,xmaxHisto,histogramType),isValid=[isValidRange.min,isValidRange.max];$scope.isValidRangeFit.push(isValid),$scope.isValidAllRange=!0,$scope.isValidAllFunc=$scope.isValidAllFunc&&isValid[0]&&isValid[1]})},!0),$scope.isValidRangeFuncTotal={min:!0,max:!0},$scope.$watch("rangeTotalFit",function(newRangeTotal,oldRangeTotal){var xminHisto=$scope.drawhistolist[0].minX,xmaxHisto=$scope.drawhistolist[0].maxX,histogramType=$scope.drawhistolist[0].histogramType,min=newRangeTotal.minbinfit,max=newRangeTotal.maxbinfit;$scope.isValidRangeFuncTotal=validate.validateRangeFit(min,max,xminHisto,xmaxHisto,histogramType)},!0)}),lab.controller("PythiaHistogramCtrl",function($rootScope,$scope,$location,socket,genericService,validate,utilities){function resetFit(){$scope.isfit=!1,$scope.funclist=[],$scope.range=[],$scope.rangeTotalFit.minbinfit=$scope.xmin,$scope.rangeTotalFit.maxbinfit=$scope.xmax,$scope.isValidRangeFit=[],$scope.isValidRangeFuncTotal={min:!0,max:!0},$scope.fitJSON=null}if($scope.drawhistolist=[],void 0===$rootScope.histograms.pythiaHistograms)return console.error("undefined histogram"),void $location.url("/");$scope.drawhistolist.push($rootScope.histograms.pythiaHistograms[0]),$scope.selectedHistogram=$scope.drawhistolist[0];var fitConfig=genericService.getFitConfig(),nPoints=fitConfig.nPoints,outFitFile=fitConfig.outFitPythia;$scope.fitList=fitConfig.fitList,$scope.isfit=!1,$scope.range=[],$scope.isValidRangeFit=[],$scope.fitFunc=$scope.fitList[0],$scope.funclist=[],$scope.rangeTotalFit={minbinfit:$scope.drawhistolist[0].minX,maxbinfit:$scope.drawhistolist[0].maxX},$scope.funcTotal="",$scope.isValidGrade={isValid:!0},$scope.initFunc=function(func){$scope.isValidGrade={isValid:!0},"polynomial"===func&&(this.grade=1)},$scope.validateGrade=function(grade){$scope.isValidGrade=validate.validateGrade(grade)},$scope.addFit=function(func,grade){"polynomial"===func&&(func="pol"+grade),$scope.funclist.push(func),$scope.funcTotal=utilities.getFuncTotal($scope.funclist);var isValid=[!0,!0];$scope.isValidRangeFit.push(isValid)},$scope.newFit=function(){resetFit()},$scope.delFit=function(id){$scope.funclist.splice(id,1),$scope.range.splice(id,1),$scope.funcTotal=utilities.getFuncTotal($scope.funclist)},$scope.makeFit=function(){$scope.isfit=!1;for(var funcList=$scope.funclist,rangeFit=[$scope.rangeTotalFit.minbinfit,$scope.rangeTotalFit.maxbinfit],range=[],i=0;i<$scope.range.length;i++){var init=$scope.range[i][0],end=$scope.range[i][1];range.push(init,end)}$scope.funcrange=range,1===$scope.funclist.length&&(rangeFit=range);var pythiaROOTFile=$scope.drawhistolist[0].pythiaName,histogram=$scope.drawhistolist[0].pythiaDataName+":"+$scope.drawhistolist[0].particleName,fitData={outFitFile:outFitFile,histogram:histogram,nPoints:nPoints,funcList:funcList,range:range,rangeFit:rangeFit,actionName:pythiaROOTFile};socket.emit("exp:Fit",fitData),$scope.fitFunc=$scope.fitList[0],$scope.grade=1},$scope.fitJSON=null,socket.on("exp:outFit",function(data){$scope.isfit=!0,$scope.fitJSON=JSON.parse(data),$scope.$digest()}),$scope.$watch("range",function(newRange,oldRange){var xminHisto=$scope.drawhistolist[0].minX,xmaxHisto=$scope.drawhistolist[0].maxX;$scope.isValidRangeFit=[],$scope.isValidAllFunc=!0,newRange.forEach(function(r){var isValidRange=validate.validateRangeFit(r[0],r[1],xminHisto,xmaxHisto,null),isValid=[isValidRange.min,isValidRange.max];$scope.isValidRangeFit.push(isValid),$scope.isValidAllRange=!0,$scope.isValidAllFunc=$scope.isValidAllFunc&&isValid[0]&&isValid[1]})},!0),$scope.isValidRangeFuncTotal={min:!0,max:!0},$scope.$watch("rangeTotalFit",function(newRangeTotal,oldRangeTotal){$scope.drawhistolist[0].minX,$scope.drawhistolist[0].maxX,$scope.drawhistolist[0].histogramType,newRangeTotal.minbinfit,newRangeTotal.maxbinfit},!0)}),lab.controller("PythiaTreeCtrl",function($rootScope,$scope,$location,modelPythiaService,modelSourceService,utilities){console.log("eventjson",$rootScope.histograms.pythiaTree),$scope.isViewData=!0;var sourceList=modelSourceService.getParticleList(),particleList=sourceList.particles;$scope.pythiaStatus=modelPythiaService.getStatus(),$scope.lgMargin={top:20,right:0,bottom:20,left:20};if(void 0===$rootScope.experiment)return console.error("undefined experiment"),void $location.url("/");var beamA=$rootScope.experiment.pythiaData.pythiaBeam.beamA,beamB=$rootScope.experiment.pythiaData.pythiaBeam.beamB;$scope.textBeamA=utilities.getParticleName("pdg",beamA,particleList),$scope.textBeamB=utilities.getParticleName("pdg",beamB,particleList);var frame=$rootScope.experiment.pythiaData.pythiaBeam.energy.frame,units=$rootScope.experiment.pythiaData.pythiaBeam.energy.units;if(1===frame.option){var eCM=$rootScope.experiment.pythiaData.pythiaBeam.energy.eCM;$scope.textEnergy="<b>Energy ("+frame.name+"): </b>"+eCM+" "+units}else if(2===frame.option){var eA=$rootScope.experiment.pythiaData.pythiaBeam.energy.eA,eB=$rootScope.experiment.pythiaData.pythiaBeam.energy.eB;$scope.textEnergy="<b>Energy (A): </b>"+eA+" "+units+", <b>Energy (B): </b>"+eB+" "+units}else text="Error: not defined pythia beam"}),lab.controller("ScorerHistogramCtrl",function($rootScope,$scope,$location,validate){if($scope.title="Histogram scorer",$scope.graphTypeList=["index","2D projection","3D projection"],void 0===$rootScope.histograms.scorerHistograms[0]||null===$rootScope.histograms.scorerHistograms[0])return void $location.url("/");$scope.selectedScorer=$rootScope.histograms.scorerHistograms[0],$scope.isClassifier=$scope.selectedScorer.isClassifier,$scope.scorerVolume=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.name===$scope.selectedScorer.volume}),void 0!==$scope.scorerVolume.parameterisation?$scope.isPhantom="PHANTOM"===$scope.scorerVolume.parameterisation.type:$scope.isPhantom=!1,$scope.$watch("selectedScorer",function(newScorer,oldScorer){if($scope.scorerVolume=_.find($rootScope.experiment.geometry.volumeList,function(v){return v.name===newScorer.volume}),void 0!==$scope.scorerVolume&&$scope.scorerVolume.isParam&&($scope.isPhantom="PHANTOM"===$scope.scorerVolume.parameterisation.type),$scope.graphType=$scope.graphTypeList[0],$scope.layer=1,$scope.isPhantom){var dimUnits=$scope.scorerVolume.solid.dimensions["Length X"].units,ratioLayer=($scope.scorerVolume.solid.dimensions["Length Z"].value/$scope.scorerVolume.parameterisation.parameters["N copies Z"].value).toFixed(2);$scope.dimLayer=ratioLayer+" "+dimUnits+" per layer"}$scope.isClassifier=$scope.selectedScorer.isClassifier},!0),$scope.isValidLayer={isValid:!0},$scope.$watch("layer",function(newLayer,oldLayer){if($scope.isPhantom){var nz=$scope.scorerVolume.parameterisation.parameters["N copies Z"].value;$scope.isValidLayer=validate.validateLayerScorer(newLayer,nz)}},!0)}),lab.controller("SummaryCtrl",function($rootScope,$scope,$location){if($scope.isViewData=!0,void 0===$rootScope.histograms.summary.partCount&&void 0===$rootScope.histograms.summary.procCount&&void 0===$rootScope.histograms.summary.procCreator)return void $location.url("/");var lParticleCounter={title:"Particle Counter",xaxis:{title:"Particles",showline:!0},yaxis:{title:"Number of particles",showline:!0}},lProcCounter={title:"Process Counter",xaxis:{title:"Particles",showline:!0},yaxis:{title:"Number of processes",showline:!0},barmode:"group"},lProcCreator={title:"Process Creator",xaxis:{title:"Particles",showline:!0},yaxis:{title:"Number of processes",showline:!0},barmode:"group"},hParticleCounter={data:[$rootScope.histograms.summary.partCount],layout:lParticleCounter},hProcCounter={data:$rootScope.histograms.summary.procCount,layout:lProcCounter},hProcCreator={data:$rootScope.histograms.summary.procCreator,layout:lProcCreator};$scope.histogramList=[hParticleCounter,hProcCounter,hProcCreator],$scope.selectedHistogram=$scope.histogramList[0]});