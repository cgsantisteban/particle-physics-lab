"use strict";lab.controller("ConsoleCtrl",function($rootScope,$scope,geantCommandsService,socket){var commandList=geantCommandsService.getCommandList();$scope.geantCommands_tree=angular.copy(commandList),$scope.nodeCopy={node:null,isCopy:!1},$scope.$watch("gamosTree.currentNode",function(newObj,oldObj){$scope.gamosTree&&angular.isObject($scope.gamosTree.currentNode)},!1),$scope.copyCommand=function(node){if("command"===node.type){var cmd=node.route+node.command;$scope.nodeCopy={cmd:cmd,isCopy:!0}}},$scope.getState=function(stateList){var prompt=$rootScope.termData.term.prompt,state=prompt.substring(0,prompt.length-1),isAvailable=!0;return stateList.indexOf("all")<0&&stateList.indexOf(state)<0&&(isAvailable=!1),isAvailable},socket.on("exp:ErrorConsole",function(error){console.log("ErrorConsole--\x3e",error)}),$scope.getEvidenceInfos=function(evidence,event){event.originalEvent.clipboardData}}),lab.controller("DelExperimentCtrl",function($scope,$rootScope,ExperimentListService,initExperiment,$uibModalInstance,experiment){$scope.expDel=experiment,$scope.delExperiment=function(id){var ok=!1;void 0!==id&&void 0!==$rootScope.experiment?(id===$rootScope.experiment._id&&($rootScope.experiment=initExperiment.getExperiment(),$rootScope.isValidExperiment=initExperiment.isValidExperiment,$rootScope.isSaved=!1),ExperimentListService.delExperiment(id).then(function(experimentList){$rootScope.experimentList=experimentList.data},function(error){console.error(data)}),ok=!0):console.log("The experiment has not been deleted"),$uibModalInstance.close(ok)},$scope.cancel=function(){$uibModalInstance.dismiss("Cancel")}}),lab.controller("ExperimentListCtrl",function($scope,$rootScope,socket,ExperimentListService,initExperiment,$location,$uibModal){function getExperimentList(experimentList,sortReverse,sortType,searchExp,itemsPerPage){var expList=[],sortOrder="asc";if(sortReverse&&(sortOrder="desc"),void 0!==searchExp&&""!==searchExp)for(var i=0;i<experimentList.length;i++){var exp=experimentList[i],isName=exp.name.includes(searchExp),isDescription=!1;void 0!==exp.description&&null!==exp.description&&(isDescription=exp.description.includes(searchExp)),(isName||isDescription)&&expList.push(exp)}else expList=experimentList;return _.orderBy(expList,[sortType],[sortOrder])}$scope.itemList=[5,10,20,"All"],$scope.nItem=$scope.itemList[0],$scope.itemsPerPage=$scope.itemList[0],$scope.currentPage=1,$scope.sortType="name",$scope.sortReverse=!1,$scope.searchExp="",$scope.setItemPerPage=function(nItem){"All"!==nItem?$scope.itemsPerPage=nItem:($scope.totalExperiments=$rootScope.experimentList.length,void 0!==$scope.totalExperiments&&null!=$scope.totalExperiments?$scope.itemsPerPage=$scope.totalExperiments:$scope.itemsPerPage=$scope.itemList[0])},$scope.pageChanged=function(){var firstExp=($scope.currentPage-1)*$scope.itemsPerPage,lastElement=firstExp+$scope.itemsPerPage,expList=getExperimentList($rootScope.experimentList,$scope.sortReverse,$scope.sortType,$scope.searchExp,$scope.itemsPerPage);$scope.currentExperimentList=expList.slice(firstExp,lastElement)},$scope.$watch("[experimentList,itemsPerPage, sortReverse,sortType,searchExp]",function(newValues,oldValues){var experimentList=newValues[0],itemsPerPage=newValues[1],sortReverse=newValues[2],sortType=newValues[3],searchExp=newValues[4],expList=getExperimentList(experimentList,sortReverse,sortType,searchExp,itemsPerPage);$scope.totalExperiments=expList.length;var firstExp=($scope.currentPage-1)*itemsPerPage,lastElement=firstExp+itemsPerPage;$scope.currentExperimentList=expList.slice(firstExp,lastElement)},!0),$scope.loadExperiment=function(size,_experiment){$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/main/loadExperiment.html",controller:"LoadExperimentCtrl",size:size,resolve:{experiment:function(){return _experiment}}}).result.then(function(experiment){socket.emit("newExperiment",{}),$rootScope.experiment=experiment;var histograms=initExperiment.getHistograms();$rootScope.histograms=angular.copy(histograms),$rootScope.experimentSummary={},$rootScope.showSummary=!1,$rootScope.isSaved=!0,$location.url("/particlelab")},function(error){console.error(error)})},$scope.delExperiment=function(size,_experiment2){if(void 0!==_experiment2._id){$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/main/delExperiment.html",controller:"DelExperimentCtrl",size:size,resolve:{experiment:function(){return _experiment2}}}).result.then(function(ok){},function(cancel){})}}}),lab.controller("ImportExperimentCtrl",function($scope,validateExpJSON,$uibModalInstance){$scope.isValidLoad={},$scope.isValidFile=!1;var reader=new FileReader;reader.onload=function(){$scope.isValidLoad=validateExpJSON.validateExperiment(reader.result),console.log($scope.isValidLoad);for(var k in $scope.isValidLoad.elementList){if(!$scope.isValidLoad.elementList[k]){$scope.isValidFile=!1;break}$scope.isValidFile=!0}$scope.isValidFile&&($scope.expLoad=JSON.parse(reader.result)),$scope.$apply()},$scope.fileExpChanged=function(ele){reader.readAsText(ele.files[0])},$scope.importExperiment=function(expLoad){var experiment=expLoad;$uibModalInstance.close(experiment)},$scope.cancel=function(){$uibModalInstance.dismiss()}}),lab.controller("LoadExperimentCtrl",function($rootScope,$scope,$uibModalInstance,experiment,modelSourceService,utilities){$scope.expLoad=experiment;var sourceList=modelSourceService.getParticleList(),particleList=sourceList.particles;$scope.getPythiaData=function(pythiaData){var text=void 0,beamA=pythiaData.pythiaBeam.beamA,beamB=pythiaData.pythiaBeam.beamB;text="<p><b>Collision: </b>"+utilities.getParticleName("pdg",beamA,particleList)+" + "+utilities.getParticleName("pdg",beamB,particleList)+"</p>";var frame=pythiaData.pythiaBeam.energy.frame,units=pythiaData.pythiaBeam.energy.units;if(1===frame.option){var eCM=pythiaData.pythiaBeam.energy.eCM;text+="<p><b>Energy ("+frame.name+"): </b>"+eCM+" "+units+"</p>"}else if(2===frame.option){var eA=pythiaData.pythiaBeam.energy.eA,eB=pythiaData.pythiaBeam.energy.eB;text+="<p><b>Energy (A): </b>"+eA+" "+units+", <b>Energy (B): </b>"+eB+" "+units+"</p>"}else text="Error: not defined pythia beam";return text},$scope.loadExperiment=function(){if(void 0!==experiment._id)$uibModalInstance.close(experiment);else{console.error("Error: undefined experiment");$uibModalInstance.dismiss("Error: undefined experiment")}},$scope.cancel=function(){$uibModalInstance.dismiss("cancel load")}}),lab.controller("MacroFilesCtrl",function($rootScope,$scope,$uibModalInstance,buildMacro,buildGeom){$scope.macroFile=buildMacro.buildMacroFile($rootScope.experiment),$scope.geomFile=buildGeom.buildGeomCommands($rootScope.experiment.geometry.volumeList),$scope.datosPrueba="uno\n dos",$scope.editorOptions={lineWrapping:!0,lineNumbers:!0,readOnly:"nocursor",mode:"xml"},$scope.okFiles=function(){$uibModalInstance.close()}}),lab.controller("NewExperimentCtrl",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close(!0)},$scope.cancel=function(){$uibModalInstance.dismiss(!1)}}),lab.controller("ParticleLabCtrl",function($rootScope,$scope,$sanitize,genericService,initGeomService,modelSourceService,initExperiment,socket,validate,utilities,buildMacro,$uibModal,$http){function stopExperiment(){socket.emit("exp:Kill","stop"),$scope.endRun=!0,$rootScope.showSummary=!1,$scope.cancelExperiment=!0;var histograms=initExperiment.getHistograms();$rootScope.histograms=angular.copy(histograms)}var initDataList=genericService.getInitPhysicsList();$scope.initPhysicsList=initDataList.physicsList;var initGeomData=initGeomService.getInitGeom();if($scope.electricField=angular.copy(initGeomData.electricField),$scope.magneticField=angular.copy(initGeomData.magneticField),$scope.maxEvent=Number.MAX_SAFE_INTEGER,$scope.showErrorFile=!1,void 0===$rootScope.experiment||null==$rootScope.experiment){$rootScope.experiment=initExperiment.getExperiment();var histograms=initExperiment.getHistograms();$rootScope.histograms=angular.copy(histograms),$rootScope.isSaved=!1}socket.on("errorFolder",function(error){console.error("error folder",error)}),$scope.getPhysicsLibHelp=function(physicsLib,physicsList){for(var find=!1,pos=0,content="";!find&&pos<physicsList.length;)physicsLib===physicsList[pos].lib?(find=!0,content+="<strong>Description:</strong> <span>"+physicsList[pos].description+"</span><br>"):pos++;return $sanitize(content)},$scope.isShowProcesses=!0,$scope.showTitle="Show processes",$scope.showProcesses=function(){$scope.isShowProcesses=!$scope.isShowProcesses,$scope.isShowProcesses?$scope.showTitle="Show processes":$scope.showTitle="Hide processes"},$scope.selectAllProcess=function(){$rootScope.experiment.processRemove=[]},$scope.getProcessList=function(physicsLib,physicsList){var processList=null,physics=_.find(physicsList,function(phy){return phy.lib===physicsLib});return void 0!==physics&&(processList=physics.processList),processList},$scope.findProcess=function(process){var find=!0;return $rootScope.experiment.processRemove.indexOf(process)>=0&&(find=!1),find},$scope.isSelectProcess=!1,$scope.initProcessRemove=function(){$rootScope.experiment.processRemove=[],$scope.removePythiaData=!1;var selectedPhy=_.find(initDataList.physicsList,function(phy){return phy.lib===$rootScope.experiment.physicsLib});selectedPhy.isPythia||void 0===$rootScope.experiment.pythiaData||null===$rootScope.experiment.pythiaData||($rootScope.experiment.isPythia=!1,$rootScope.experiment.pythiaData=null,$scope.removePythiaData=!0);var newFilterList=[];$scope.removeFilters=[];for(var i=0;i<$rootScope.experiment.data.filterList.length;i++){var filter=$rootScope.experiment.data.filterList[i];if("Process"!=filter.type)newFilterList.push(filter);else{$scope.isSelectProcess=!1;for(var ii=0;ii<filter.parameters.length;ii++)if("selectProcess"===filter.parameters[ii].paramType){var process=filter.parameters[ii].value,processList=null;if(void 0!==selectedPhy&&(processList=selectedPhy.processList),processList.indexOf(process)<0){$scope.removeFilters.push(filter.name),$scope.isSelectProcess=!0;for(var iii=0;iii<$rootScope.experiment.data.actionList.length;iii++){var action=$rootScope.experiment.data.actionList[iii],pos=action.filterList.indexOf(filter);pos>=0&&$rootScope.experiment.data.actionList[iii].filterList.splice(pos,1)}for(var iv=0;iv<$rootScope.experiment.data.scorerList.length;iv++){var scorer=$rootScope.experiment.data.scorerList[iv],_pos=scorer.filterList.indexOf(filter);_pos>=0&&$rootScope.experiment.data.scorerList[iv].filterList.splice(_pos,1)}break}}$scope.isSelectProcess||newFilterList.push(filter)}}$rootScope.experiment.data.filterList=newFilterList},$scope.addProcess=function(process){var pos=$rootScope.experiment.processRemove.indexOf(process);pos>=0?$rootScope.experiment.processRemove.splice(pos,1):$rootScope.experiment.processRemove.push(process)},$scope.$watch("experiment.nBeams",function(newBeams,oldBeams){$scope.isValidBeams=validate.validateBeams(newBeams,$rootScope.maxBeams),$rootScope.isValidExperiment.isValidBeams=$scope.isValidBeams.isValid,newBeams!=oldBeams&&($rootScope.isSaved=!1)},!0),$scope.$watch("experiment.emField",function(newField,oldField){$scope.isValidField={},$rootScope.isValidExperiment.isValidEMField=!0;for(var fieldType in newField){$scope.isValidField[fieldType]=validate.validateField(fieldType,newField[fieldType]);for(var f in $scope.isValidField[fieldType])$rootScope.isValidExperiment.isValidEMField=$rootScope.isValidExperiment.isValidEMField&&$scope.isValidField[fieldType][f].isValid}newField!=oldField&&($rootScope.isSaved=!1)},!0),$scope.$watch("experiment.localField",function(newField,oldField){$scope.isValidLocalField={},$rootScope.isValidExperiment.isValidLocalField=!0;for(var fieldType in newField){$scope.isValidLocalField[fieldType]=validate.validateField(fieldType,newField[fieldType]);for(var f in $scope.isValidLocalField[fieldType])$rootScope.isValidExperiment.isValidLocalField=$rootScope.isValidExperiment.isValidLocalField&&$scope.isValidLocalField[fieldType][f].isValid}newField!=oldField&&($rootScope.isSaved=!1)},!0),$scope.$watch("isValidExperiment",function(newIsValidExperiment,oldIsValidExperiment){$rootScope.isValidAll=!0;for(var k in newIsValidExperiment)if($rootScope.isValidAll=$rootScope.isValidAll&&newIsValidExperiment[k],!$rootScope.isValidAll)break},!0);var sourceList=modelSourceService.getParticleList(),particleList=sourceList.particles;if($rootScope.experiment.isPythia){var beamA=$rootScope.experiment.pythiaData.pythiaBeam.beamA,beamB=$rootScope.experiment.pythiaData.pythiaBeam.beamB;$scope.textBeamA=utilities.getParticleName("pdg",beamA,particleList),$scope.textBeamB=utilities.getParticleName("pdg",beamB,particleList);var frame=$rootScope.experiment.pythiaData.pythiaBeam.energy.frame,units=$rootScope.experiment.pythiaData.pythiaBeam.energy.units;if(1===frame.option){var eCM=$rootScope.experiment.pythiaData.pythiaBeam.energy.eCM;$scope.textEnergy="<b>Energy ("+frame.name+"): </b>"+eCM+" "+units}else if(2===frame.option){var eA=$rootScope.experiment.pythiaData.pythiaBeam.energy.eA,eB=$rootScope.experiment.pythiaData.pythiaBeam.energy.eB;$scope.textEnergy="<b>Energy (A): </b>"+eA+" "+units+", <b>Energy (B): </b>"+eB+" "+units}else text="Error: not defined pythia beam"}$scope.runExperiment=function(size){if(void 0!==$rootScope.experiment){$rootScope.showSummary=!1;$uibModal.open({animation:!0,backdrop:!1,templateUrl:"views/main/runExperiment.html",controller:"RunExperimentCtrl",size:size,resolve:{}}).result.then(function(isOk){$rootScope.okRunExperiment&&($rootScope.showSummary=!0,_.isEmpty($rootScope.errorList.errorFile)||($scope.showErrorFile=!0))},function(cancel){$rootScope.okRunExperiment?$rootScope.showSummary=!0:stopExperiment()})}},$scope.showMacroFiles=function(size){$uibModal.open({animation:!0,backdrop:!0,templateUrl:"views/main/macroFiles.html",controller:"MacroFilesCtrl",size:size,resolve:{}}).result.then(function(isOk){},function(cancel){})},socket.on("exp:WRLFile",function(data){$scope.wrlJSON=data,$scope.$digest()}),$scope.getExperimentFiles=function(expId){$http({url:"getExperimentFiles",method:"GET",params:{},responseType:"blob"}).then(function(data,status,headers,config){var blob=new Blob([data.data]);saveAs(blob,"experiment.zip")},function(error){console.error("Unable to download the file")})}}),lab.controller("RunExperimentCtrl",function($rootScope,$scope,$uibModalInstance,$location,socket,initExperiment,buildMacro,buildGeom){function resetHistogram(){var histograms=initExperiment.getHistograms();$rootScope.histograms=angular.copy(histograms)}function getProcData(procCounter){for(var outCounter=[],procNoAll=_.filter(procCounter,function(pC){return"ALL"!==pC.proc}),particles=[],i=0;i<procNoAll.length;i++)particles.indexOf(procNoAll[i].particle)<0&&particles.push(procNoAll[i].particle);for(var processes=[],_i=0;_i<procNoAll.length;_i++)processes.indexOf(procNoAll[_i].proc)<0&&processes.push(procNoAll[_i].proc);return processes.forEach(function(proc){var data={x:particles,y:[],name:proc,type:"bar"};particles.forEach(function(particle){var p=_.find(procNoAll,function(pC){return pC.particle===particle&&pC.proc===proc});void 0===p?data.y.push(0):data.y.push(p.count)}),outCounter.push(data)}),outCounter}if($scope.isCollapsed=!1,$scope.nEvent=0,$scope.nBeams=$rootScope.experiment.nBeams,$scope.buildGeom=!1,$scope.buildMacro=!1,$scope.beginSimulation=!1,$scope.endRun=!1,$scope.errorRun=!1,$scope.simulationTime={},$scope.buildPythia=!1,$scope.beginPythiaRun=!1,$scope.endPythiaRun=!1,$scope.errorPythiaRun={isError:!1},$rootScope.okRunExperiment=!1,void 0!==$rootScope.experiment&&null!==$rootScope.experiment){resetHistogram();var macroCommands=buildMacro.buildMacroFile($rootScope.experiment),geomCommands=buildGeom.buildGeomCommands($rootScope.experiment.geometry.volumeList),commandList={macro:{fileName:$rootScope.experiment.macroFile,macroCommands:macroCommands},geom:{fileName:$rootScope.experiment.geomFile,geomCommands:geomCommands},nBeams:$rootScope.experiment.nBeams,actionList:$rootScope.experiment.data.actionList,scorerList:$rootScope.experiment.data.scorerList};socket.emit("exp:Run",commandList)}else console.error("error al ejecutar");$scope.okRun=function(isOk){if(isOk){var experimentSummary={nEvent:$scope.nEvent,time:$scope.simulationTime};$rootScope.experimentSummary=experimentSummary,$uibModalInstance.close(isOk)}else $scope.endRun=!0,$scope.cancelExperiment=!0,resetHistogram(),$uibModalInstance.close("error");$location.url("/particlelab")},$scope.stopExperiment=function(){socket.emit("exp:Kill","stop"),$scope.endRun=!0,$scope.cancelExperiment=!0,resetHistogram(),$uibModalInstance.dismiss("cancel")},socket.on("exp:buildGeom",function(state){$scope.buildGeom=state,$scope.$digest()}),socket.on("exp:buildPythia",function(state){$scope.buildPythia=state,$scope.$digest()}),socket.on("exp:buildMacro",function(state){$scope.buildMacro=state,$scope.$digest()}),socket.on("exp:beginPythiaRun",function(state){$scope.beginPythiaRun=state,$scope.$digest()}),socket.on("exp:nPythiaEvent",function(nPythiaEvent){$scope.nPythiaEvent=nPythiaEvent,$scope.$digest()}),socket.on("exp:beginSimulation",function(state){$scope.beginSimulation=state,$scope.$digest()}),socket.on("exp:nEvent",function(data){$scope.nEvent=parseInt(data),$scope.nEvent===$rootScope.experiment.nBeams&&($scope.endRun=!0),$scope.$digest()}),$scope.outExperiment=[],socket.on("exp:outDataSimulation",function(data){$scope.outExperiment.push(data)});var partCountOut={x:[],y:[],type:"bar"},procCountOut=[],procCreatorOut=[];socket.on("exp:simulationTime",function(simulationTime){$scope.simulationTime=simulationTime,$scope.$digest()}),socket.on("exp:partCount",function(data){partCountOut.x.push(data.particle),partCountOut.y.push(data.count),$scope.$digest()}),socket.on("exp:procCount",function(data){procCountOut.push(data),$scope.$digest()}),socket.on("exp:procCreator",function(data){procCreatorOut.push(data),$scope.$digest()}),$rootScope.errorList={errorFile:[],errorGAMOS:null,errorFolder:null,errorPythia:null},socket.on("error:File",function(error){console.error(error),$rootScope.errorList.errorFile.push(error),$rootScope.$digest()}),socket.on("error:GAMOSRun",function(error){console.error(error),$rootScope.errorList.errorGAMOS=error,$scope.$digest()}),socket.on("error:FolderExp",function(error){console.error(error),$rootScope.errorList.errorFolder=error,$scope.$digest()}),socket.on("error:PythiaRun",function(error){console.error(error),$rootScope.errorList.errorPythia=error,$scope.$digest()}),socket.once("exp:Histograms",function(histograms){$rootScope.histograms.actionHistograms=histograms.actionHistograms,$rootScope.histograms.scorerHistograms=histograms.scorerHistograms,$scope.$digest()}),socket.on("exp:endPythiaRun",function(outPythia){$scope.outPythia=outPythia,outPythia.isError||($scope.endPythiaRun=!0),$scope.$digest()}),socket.once("exp:pythiaHistogram",function(pythiaHistograms){$rootScope.histograms.pythiaHistograms=JSON.parse(pythiaHistograms),$scope.$digest()}),socket.on("exp:pythiaTree",function(pythiaTree){$rootScope.histograms.pythiaTree=pythiaTree,$scope.$digest()}),socket.on("exp:pythiaTreeFileError",function(error){console.error(error),$scope.$digest()}),socket.on("exp:endGAMOSRun",function(codeExit){$scope.endRun=!0,codeExit>=0?($scope.errorRun=!1,$rootScope.histograms.summary.partCount=partCountOut,$rootScope.histograms.summary.procCount=getProcData(procCountOut),$rootScope.histograms.summary.procCreator=getProcData(procCreatorOut),$rootScope.experiment.isPythia?$rootScope.okRunExperiment=!$scope.errorPythiaRun.isError:$rootScope.okRunExperiment=!0):($rootScope.okRunExperiment=!1,$scope.errorRun=!0)})}),lab.controller("SaveExperimentCtrl",function($scope,$rootScope,ExperimentListService,validate,utilities,$uibModalInstance){ExperimentListService.getExperimentList(),null===$rootScope.experiment.name?$scope.expName=utilities.generateName($rootScope.experimentList,"experiment"):$scope.expName=$rootScope.experiment.name,$scope.expDescription=null,$scope.$watch("[expName,expDescription]",function(newValues,oldValues){var name=newValues[0],description=newValues[1];$scope.isValidName=validate.validateName($rootScope.experimentList,name,-1,-1,"experimentName"),$scope.maxLength=150,$scope.isValidDescription=validate.validateText(description,$scope.maxLength),$scope.isValidDescription.isValid&&null!==$scope.expDescription&&($scope.textLeft=$scope.maxLength-description.length)}),$scope.saveExperiment=function(name,description){if(void 0===$rootScope.experiment._id){var date=Date.now();$rootScope.experiment.name=name,$rootScope.experiment.description=description,$rootScope.experiment.date=date,ExperimentListService.saveExperiment($rootScope.experiment).then(function(data){$rootScope.experiment=data.data.experiment,$rootScope.experimentList=data.data.experimentList},function(error){console.error(error)})}$uibModalInstance.close($rootScope.experiment)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}});